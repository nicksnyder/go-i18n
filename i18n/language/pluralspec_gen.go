package language

// This file is generated by i18n/language/codegen/generate.sh

func init() {

	RegisterPluralSpec([]string{"bm", "bo", "dz", "id", "ig", "ii", "in", "ja", "jbo", "jv", "jw", "kde", "kea", "km", "ko", "lkt", "lo", "ms", "my", "nqo", "root", "sah", "ses", "sg", "th", "to", "vi", "wo", "yo", "zh"}, &PluralSpec{
		Plurals: newPluralSet(Other),
		PluralFunc: func(op *Operand) Plural {
			return Other
		},
	})
	RegisterPluralSpec([]string{"am", "as", "bn", "fa", "gu", "hi", "kn", "mr", "zu"}, &PluralSpec{
		Plurals: newPluralSet(One, Other),
		PluralFunc: func(op *Operand) Plural {
			// i = 0 or n = 1
			if intEqualsAny(op.I, 0) ||
				op.NequalsAny(1) {
				return One
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"ff", "fr", "hy", "kab"}, &PluralSpec{
		Plurals: newPluralSet(One, Other),
		PluralFunc: func(op *Operand) Plural {
			// i = 0,1
			if intEqualsAny(op.I, 0, 1) {
				return One
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"ast", "ca", "de", "en", "et", "fi", "fy", "gl", "it", "ji", "nl", "sv", "sw", "ur", "yi"}, &PluralSpec{
		Plurals: newPluralSet(One, Other),
		PluralFunc: func(op *Operand) Plural {
			// i = 1 and v = 0
			if intEqualsAny(op.I, 1) && intEqualsAny(op.V, 0) {
				return One
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"si"}, &PluralSpec{
		Plurals: newPluralSet(One, Other),
		PluralFunc: func(op *Operand) Plural {
			// n = 0,1 or i = 0 and f = 1
			if op.NequalsAny(0, 1) ||
				intEqualsAny(op.I, 0) && intEqualsAny(op.F, 1) {
				return One
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"ak", "bh", "guw", "ln", "mg", "nso", "pa", "ti", "wa"}, &PluralSpec{
		Plurals: newPluralSet(One, Other),
		PluralFunc: func(op *Operand) Plural {
			// n = 0..1
			if op.NinRange(0, 1) {
				return One
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"tzm"}, &PluralSpec{
		Plurals: newPluralSet(One, Other),
		PluralFunc: func(op *Operand) Plural {
			// n = 0..1 or n = 11..99
			if op.NinRange(0, 1) ||
				op.NinRange(11, 99) {
				return One
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"pt"}, &PluralSpec{
		Plurals: newPluralSet(One, Other),
		PluralFunc: func(op *Operand) Plural {
			// n = 0..2 and n != 2
			if op.NinRange(0, 2) && !op.NequalsAny(2) {
				return One
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"af", "asa", "az", "bem", "bez", "bg", "brx", "ce", "cgg", "chr", "ckb", "dv", "ee", "el", "eo", "es", "eu", "fo", "fur", "gsw", "ha", "haw", "hu", "jgo", "jmc", "ka", "kaj", "kcg", "kk", "kkj", "kl", "ks", "ksb", "ku", "ky", "lb", "lg", "mas", "mgo", "ml", "mn", "nah", "nb", "nd", "ne", "nn", "nnh", "no", "nr", "ny", "nyn", "om", "or", "os", "pap", "ps", "rm", "rof", "rwk", "saq", "sdh", "seh", "sn", "so", "sq", "ss", "ssy", "st", "syr", "ta", "te", "teo", "tig", "tk", "tn", "tr", "ts", "ug", "uz", "ve", "vo", "vun", "wae", "xh", "xog"}, &PluralSpec{
		Plurals: newPluralSet(One, Other),
		PluralFunc: func(op *Operand) Plural {
			// n = 1
			if op.NequalsAny(1) {
				return One
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"pt_PT"}, &PluralSpec{
		Plurals: newPluralSet(One, Other),
		PluralFunc: func(op *Operand) Plural {
			// n = 1 and v = 0
			if op.NequalsAny(1) && intEqualsAny(op.V, 0) {
				return One
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"da"}, &PluralSpec{
		Plurals: newPluralSet(One, Other),
		PluralFunc: func(op *Operand) Plural {
			// n = 1 or t != 0 and i = 0,1
			if op.NequalsAny(1) ||
				!intEqualsAny(op.T, 0) && intEqualsAny(op.I, 0, 1) {
				return One
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"is"}, &PluralSpec{
		Plurals: newPluralSet(One, Other),
		PluralFunc: func(op *Operand) Plural {
			// t = 0 and i % 10 = 1 and i % 100 != 11 or t != 0
			if intEqualsAny(op.T, 0) && intEqualsAny(op.I%10, 1) && !intEqualsAny(op.I%100, 11) ||
				!intEqualsAny(op.T, 0) {
				return One
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"mk"}, &PluralSpec{
		Plurals: newPluralSet(One, Other),
		PluralFunc: func(op *Operand) Plural {
			// v = 0 and i % 10 = 1 or f % 10 = 1
			if intEqualsAny(op.V, 0) && intEqualsAny(op.I%10, 1) ||
				intEqualsAny(op.F%10, 1) {
				return One
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"fil", "tl"}, &PluralSpec{
		Plurals: newPluralSet(One, Other),
		PluralFunc: func(op *Operand) Plural {
			// v = 0 and i = 1,2,3 or v = 0 and i % 10 != 4,6,9 or v != 0 and f % 10 != 4,6,9
			if intEqualsAny(op.V, 0) && intEqualsAny(op.I, 1, 2, 3) ||
				intEqualsAny(op.V, 0) && !intEqualsAny(op.I%10, 4, 6, 9) ||
				!intEqualsAny(op.V, 0) && !intEqualsAny(op.F%10, 4, 6, 9) {
				return One
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"lv", "prg"}, &PluralSpec{
		Plurals: newPluralSet(Zero, One, Other),
		PluralFunc: func(op *Operand) Plural {
			// n % 10 = 0 or n % 100 = 11..19 or v = 2 and f % 100 = 11..19
			if op.NmodEqualsAny(10, 0) ||
				op.NmodInRange(100, 11, 19) ||
				intEqualsAny(op.V, 2) && intInRange(op.F%100, 11, 19) {
				return Zero
			}
			// n % 10 = 1 and n % 100 != 11 or v = 2 and f % 10 = 1 and f % 100 != 11 or v != 2 and f % 10 = 1
			if op.NmodEqualsAny(10, 1) && !op.NmodEqualsAny(100, 11) ||
				intEqualsAny(op.V, 2) && intEqualsAny(op.F%10, 1) && !intEqualsAny(op.F%100, 11) ||
				!intEqualsAny(op.V, 2) && intEqualsAny(op.F%10, 1) {
				return One
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"lag"}, &PluralSpec{
		Plurals: newPluralSet(Zero, One, Other),
		PluralFunc: func(op *Operand) Plural {
			// n = 0
			if op.NequalsAny(0) {
				return Zero
			}
			// i = 0,1 and n != 0
			if intEqualsAny(op.I, 0, 1) && !op.NequalsAny(0) {
				return One
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"ksh"}, &PluralSpec{
		Plurals: newPluralSet(Zero, One, Other),
		PluralFunc: func(op *Operand) Plural {
			// n = 0
			if op.NequalsAny(0) {
				return Zero
			}
			// n = 1
			if op.NequalsAny(1) {
				return One
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"iu", "kw", "naq", "se", "sma", "smi", "smj", "smn", "sms"}, &PluralSpec{
		Plurals: newPluralSet(One, Two, Other),
		PluralFunc: func(op *Operand) Plural {
			// n = 1
			if op.NequalsAny(1) {
				return One
			}
			// n = 2
			if op.NequalsAny(2) {
				return Two
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"shi"}, &PluralSpec{
		Plurals: newPluralSet(One, Few, Other),
		PluralFunc: func(op *Operand) Plural {
			// i = 0 or n = 1
			if intEqualsAny(op.I, 0) ||
				op.NequalsAny(1) {
				return One
			}
			// n = 2..10
			if op.NinRange(2, 10) {
				return Few
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"mo", "ro"}, &PluralSpec{
		Plurals: newPluralSet(One, Few, Other),
		PluralFunc: func(op *Operand) Plural {
			// i = 1 and v = 0
			if intEqualsAny(op.I, 1) && intEqualsAny(op.V, 0) {
				return One
			}
			// v != 0 or n = 0 or n != 1 and n % 100 = 1..19
			if !intEqualsAny(op.V, 0) ||
				op.NequalsAny(0) ||
				!op.NequalsAny(1) && op.NmodInRange(100, 1, 19) {
				return Few
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"bs", "hr", "sh", "sr"}, &PluralSpec{
		Plurals: newPluralSet(One, Few, Other),
		PluralFunc: func(op *Operand) Plural {
			// v = 0 and i % 10 = 1 and i % 100 != 11 or f % 10 = 1 and f % 100 != 11
			if intEqualsAny(op.V, 0) && intEqualsAny(op.I%10, 1) && !intEqualsAny(op.I%100, 11) ||
				intEqualsAny(op.F%10, 1) && !intEqualsAny(op.F%100, 11) {
				return One
			}
			// v = 0 and i % 10 = 2..4 and i % 100 != 12..14 or f % 10 = 2..4 and f % 100 != 12..14
			if intEqualsAny(op.V, 0) && intInRange(op.I%10, 2, 4) && !intInRange(op.I%100, 12, 14) ||
				intInRange(op.F%10, 2, 4) && !intInRange(op.F%100, 12, 14) {
				return Few
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"gd"}, &PluralSpec{
		Plurals: newPluralSet(One, Two, Few, Other),
		PluralFunc: func(op *Operand) Plural {
			// n = 1,11
			if op.NequalsAny(1, 11) {
				return One
			}
			// n = 2,12
			if op.NequalsAny(2, 12) {
				return Two
			}
			// n = 3..10,13..19
			if op.NinRange(3, 10) || op.NinRange(13, 19) {
				return Few
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"sl"}, &PluralSpec{
		Plurals: newPluralSet(One, Two, Few, Other),
		PluralFunc: func(op *Operand) Plural {
			// v = 0 and i % 100 = 1
			if intEqualsAny(op.V, 0) && intEqualsAny(op.I%100, 1) {
				return One
			}
			// v = 0 and i % 100 = 2
			if intEqualsAny(op.V, 0) && intEqualsAny(op.I%100, 2) {
				return Two
			}
			// v = 0 and i % 100 = 3..4 or v != 0
			if intEqualsAny(op.V, 0) && intInRange(op.I%100, 3, 4) ||
				!intEqualsAny(op.V, 0) {
				return Few
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"dsb", "hsb"}, &PluralSpec{
		Plurals: newPluralSet(One, Two, Few, Other),
		PluralFunc: func(op *Operand) Plural {
			// v = 0 and i % 100 = 1 or f % 100 = 1
			if intEqualsAny(op.V, 0) && intEqualsAny(op.I%100, 1) ||
				intEqualsAny(op.F%100, 1) {
				return One
			}
			// v = 0 and i % 100 = 2 or f % 100 = 2
			if intEqualsAny(op.V, 0) && intEqualsAny(op.I%100, 2) ||
				intEqualsAny(op.F%100, 2) {
				return Two
			}
			// v = 0 and i % 100 = 3..4 or f % 100 = 3..4
			if intEqualsAny(op.V, 0) && intInRange(op.I%100, 3, 4) ||
				intInRange(op.F%100, 3, 4) {
				return Few
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"he", "iw"}, &PluralSpec{
		Plurals: newPluralSet(One, Two, Many, Other),
		PluralFunc: func(op *Operand) Plural {
			// i = 1 and v = 0
			if intEqualsAny(op.I, 1) && intEqualsAny(op.V, 0) {
				return One
			}
			// i = 2 and v = 0
			if intEqualsAny(op.I, 2) && intEqualsAny(op.V, 0) {
				return Two
			}
			// v = 0 and n != 0..10 and n % 10 = 0
			if intEqualsAny(op.V, 0) && !op.NinRange(0, 10) && op.NmodEqualsAny(10, 0) {
				return Many
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"cs", "sk"}, &PluralSpec{
		Plurals: newPluralSet(One, Few, Many, Other),
		PluralFunc: func(op *Operand) Plural {
			// i = 1 and v = 0
			if intEqualsAny(op.I, 1) && intEqualsAny(op.V, 0) {
				return One
			}
			// i = 2..4 and v = 0
			if intInRange(op.I, 2, 4) && intEqualsAny(op.V, 0) {
				return Few
			}
			// v != 0
			if !intEqualsAny(op.V, 0) {
				return Many
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"pl"}, &PluralSpec{
		Plurals: newPluralSet(One, Few, Many, Other),
		PluralFunc: func(op *Operand) Plural {
			// i = 1 and v = 0
			if intEqualsAny(op.I, 1) && intEqualsAny(op.V, 0) {
				return One
			}
			// v = 0 and i % 10 = 2..4 and i % 100 != 12..14
			if intEqualsAny(op.V, 0) && intInRange(op.I%10, 2, 4) && !intInRange(op.I%100, 12, 14) {
				return Few
			}
			// v = 0 and i != 1 and i % 10 = 0..1 or v = 0 and i % 10 = 5..9 or v = 0 and i % 100 = 12..14
			if intEqualsAny(op.V, 0) && !intEqualsAny(op.I, 1) && intInRange(op.I%10, 0, 1) ||
				intEqualsAny(op.V, 0) && intInRange(op.I%10, 5, 9) ||
				intEqualsAny(op.V, 0) && intInRange(op.I%100, 12, 14) {
				return Many
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"be"}, &PluralSpec{
		Plurals: newPluralSet(One, Few, Many, Other),
		PluralFunc: func(op *Operand) Plural {
			// n % 10 = 1 and n % 100 != 11
			if op.NmodEqualsAny(10, 1) && !op.NmodEqualsAny(100, 11) {
				return One
			}
			// n % 10 = 2..4 and n % 100 != 12..14
			if op.NmodInRange(10, 2, 4) && !op.NmodInRange(100, 12, 14) {
				return Few
			}
			// n % 10 = 0 or n % 10 = 5..9 or n % 100 = 11..14
			if op.NmodEqualsAny(10, 0) ||
				op.NmodInRange(10, 5, 9) ||
				op.NmodInRange(100, 11, 14) {
				return Many
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"lt"}, &PluralSpec{
		Plurals: newPluralSet(One, Few, Many, Other),
		PluralFunc: func(op *Operand) Plural {
			// n % 10 = 1 and n % 100 != 11..19
			if op.NmodEqualsAny(10, 1) && !op.NmodInRange(100, 11, 19) {
				return One
			}
			// n % 10 = 2..9 and n % 100 != 11..19
			if op.NmodInRange(10, 2, 9) && !op.NmodInRange(100, 11, 19) {
				return Few
			}
			// f != 0
			if !intEqualsAny(op.F, 0) {
				return Many
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"mt"}, &PluralSpec{
		Plurals: newPluralSet(One, Few, Many, Other),
		PluralFunc: func(op *Operand) Plural {
			// n = 1
			if op.NequalsAny(1) {
				return One
			}
			// n = 0 or n % 100 = 2..10
			if op.NequalsAny(0) ||
				op.NmodInRange(100, 2, 10) {
				return Few
			}
			// n % 100 = 11..19
			if op.NmodInRange(100, 11, 19) {
				return Many
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"ru", "uk"}, &PluralSpec{
		Plurals: newPluralSet(One, Few, Many, Other),
		PluralFunc: func(op *Operand) Plural {
			// v = 0 and i % 10 = 1 and i % 100 != 11
			if intEqualsAny(op.V, 0) && intEqualsAny(op.I%10, 1) && !intEqualsAny(op.I%100, 11) {
				return One
			}
			// v = 0 and i % 10 = 2..4 and i % 100 != 12..14
			if intEqualsAny(op.V, 0) && intInRange(op.I%10, 2, 4) && !intInRange(op.I%100, 12, 14) {
				return Few
			}
			// v = 0 and i % 10 = 0 or v = 0 and i % 10 = 5..9 or v = 0 and i % 100 = 11..14
			if intEqualsAny(op.V, 0) && intEqualsAny(op.I%10, 0) ||
				intEqualsAny(op.V, 0) && intInRange(op.I%10, 5, 9) ||
				intEqualsAny(op.V, 0) && intInRange(op.I%100, 11, 14) {
				return Many
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"br"}, &PluralSpec{
		Plurals: newPluralSet(One, Two, Few, Many, Other),
		PluralFunc: func(op *Operand) Plural {
			// n % 10 = 1 and n % 100 != 11,71,91
			if op.NmodEqualsAny(10, 1) && !op.NmodEqualsAny(100, 11, 71, 91) {
				return One
			}
			// n % 10 = 2 and n % 100 != 12,72,92
			if op.NmodEqualsAny(10, 2) && !op.NmodEqualsAny(100, 12, 72, 92) {
				return Two
			}
			// n % 10 = 3..4,9 and n % 100 != 10..19,70..79,90..99
			if (op.NmodInRange(10, 3, 4) || op.NmodEqualsAny(10, 9)) && !(op.NmodInRange(100, 10, 19) || op.NmodInRange(100, 70, 79) || op.NmodInRange(100, 90, 99)) {
				return Few
			}
			// n != 0 and n % 1000000 = 0
			if !op.NequalsAny(0) && op.NmodEqualsAny(1000000, 0) {
				return Many
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"ga"}, &PluralSpec{
		Plurals: newPluralSet(One, Two, Few, Many, Other),
		PluralFunc: func(op *Operand) Plural {
			// n = 1
			if op.NequalsAny(1) {
				return One
			}
			// n = 2
			if op.NequalsAny(2) {
				return Two
			}
			// n = 3..6
			if op.NinRange(3, 6) {
				return Few
			}
			// n = 7..10
			if op.NinRange(7, 10) {
				return Many
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"gv"}, &PluralSpec{
		Plurals: newPluralSet(One, Two, Few, Many, Other),
		PluralFunc: func(op *Operand) Plural {
			// v = 0 and i % 10 = 1
			if intEqualsAny(op.V, 0) && intEqualsAny(op.I%10, 1) {
				return One
			}
			// v = 0 and i % 10 = 2
			if intEqualsAny(op.V, 0) && intEqualsAny(op.I%10, 2) {
				return Two
			}
			// v = 0 and i % 100 = 0,20,40,60,80
			if intEqualsAny(op.V, 0) && intEqualsAny(op.I%100, 0, 20, 40, 60, 80) {
				return Few
			}
			// v != 0
			if !intEqualsAny(op.V, 0) {
				return Many
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"ar"}, &PluralSpec{
		Plurals: newPluralSet(Zero, One, Two, Few, Many, Other),
		PluralFunc: func(op *Operand) Plural {
			// n = 0
			if op.NequalsAny(0) {
				return Zero
			}
			// n = 1
			if op.NequalsAny(1) {
				return One
			}
			// n = 2
			if op.NequalsAny(2) {
				return Two
			}
			// n % 100 = 3..10
			if op.NmodInRange(100, 3, 10) {
				return Few
			}
			// n % 100 = 11..99
			if op.NmodInRange(100, 11, 99) {
				return Many
			}
			return Other
		},
	})
	RegisterPluralSpec([]string{"cy"}, &PluralSpec{
		Plurals: newPluralSet(Zero, One, Two, Few, Many, Other),
		PluralFunc: func(op *Operand) Plural {
			// n = 0
			if op.NequalsAny(0) {
				return Zero
			}
			// n = 1
			if op.NequalsAny(1) {
				return One
			}
			// n = 2
			if op.NequalsAny(2) {
				return Two
			}
			// n = 3
			if op.NequalsAny(3) {
				return Few
			}
			// n = 6
			if op.NequalsAny(6) {
				return Many
			}
			return Other
		},
	})
}
